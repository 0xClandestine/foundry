use solar_ast::{
    ast::{BinOp, Expr, ExprKind},
    visit::Visit,
};

use crate::DivideBeforeMultiply;

impl<'ast> Visit<'ast> for DivideBeforeMultiply {
    fn visit_expr(&mut self, expr: &'ast Expr<'ast>) {
        if let ExprKind::Binary(expr_0, binop, expr_1) = &expr.kind {}
    }
}

mod test {
    use std::{path::Path, vec};

    use solar_ast::ast;
    use solar_interface::{sym::assert, ColorChoice, Session};

    use crate::ForgeLint;

    #[allow(unused)]
    use super::*;
    #[allow(unused)]
    #[test]
    fn test_divide_before_multiply() -> eyre::Result<()> {
        let sess = Session::builder().with_buffer_emitter(ColorChoice::Auto).build();

        let _ = sess.enter(|| -> solar_interface::Result<()> {
            let arena = ast::Arena::new();

            let mut parser = solar_parse::Parser::from_file(
                &sess,
                &arena,
                Path::new("testdata/DivideBeforeMultiply.sol"),
            )
            .expect("TODO:");

            // Parse the file.
            let ast = parser.parse_file().map_err(|e| e.emit()).expect("TODO:");

            dbg!(&ast);

            let mut pattern = DivideBeforeMultiply::default();
            pattern.visit_source_unit(&ast);

            assert_eq!(pattern.items.len(), 0);

            Ok(())
        });

        Ok(())
    }
}
